@page
@model FoxholeIntelboard.Pages.Materials.CreateModel
@{
    ViewData["Title"] = "Create";
}
        
    <h1>Create</h1>
    <h4>Material</h4>
    <hr />
    <div class="row">
    <div class="col-md-4">
    <form method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="Material.Name" class="control-label"></label>
                <input asp-for="Material.Name" class="form-control" />
                <span asp-validation-for="Material.Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Material.CrateAmount" class="control-label"></label>
                <input asp-for="Material.CrateAmount" class="form-control" />
                <span asp-validation-for="Material.CrateAmount" class="text-danger"></span>
            </div>

            <p>Choose amount of resources:</p>
            <input type="hidden" name="SelectedCost" id="SelectedCost" />

            <div id="selectCosts" style="display: flex; gap: 10px;"> 
                <input type="radio" name="cost" value="1"> 1 Resource
                <input type="radio" name="cost" value="2"> 2 Resources
                <input type="radio" name="cost" value="3"> 3 Resources
            </div>

            <h2>Material Cost</h2>
            <br><br>
            <div id="materialCostsContainer"></div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="Index">Back to List</a>
</div>

<<<<<<< HEAD
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const selectedCosts = document.getElementById("selectCosts");
        const materialCostsContainer = document.getElementById("materialCostsContainer");
        const resources = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Resources));

        selectedCosts.addEventListener('change', function () {
            const selectedRadio = selectedCosts.querySelector('input[name="cost"]:checked');
            if (!selectedRadio) return;

            const selectedValue = parseInt(selectedRadio.value);
            materialCostsContainer.innerHTML = ""; // Clear existing inputs

            for (let i = 0; i < selectedValue; i++) {
                const group = document.createElement("div");
                group.classList.add("form-group");
                group.innerHTML = `
                    <div style="border: 1px solid grey; text-align: center;">
                        <label for="Material_ProductionCost_${i}__ResourceId">Resource ${i + 1}</label>
                        <select style="text-align: center; background-color: #f8f9fa;" name="Material.ProductionCost[${i}].ResourceId" class="form-control">
                            <option value="">-- Select Resource --</option>
                            ${resources.map(resource => `<option value="${resource.Id}">${resource.Name}</option>`).join('')}
                        </select>
                        <label for="Material_ProductionCost_${i}__Amount">Amount</label>
                        <input type="number" name="Material.ProductionCost[${i}].Amount" class="form-control" />
                    </div>
                    <br/>
                `;
                materialCostsContainer.appendChild(group);
            }
        });
    });
</script>

=======
>>>>>>> 49c42f444a140a9da8926f7471284a17fbed0dc2
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
