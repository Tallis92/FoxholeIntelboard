@page
@model FoxholeIntelboard.Pages.Lists.CreateModel

        @{
        ViewData["Title"] = "Create";
        }

        
        <h1>Create</h1>
        
    <h4>Inventory</h4>
    <hr />
    <div class="row">
    <div class="col-md-4">
    <form method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Inventory.Name" class="control-label"></label>
                <input asp-for="Inventory.Name" class="form-control" />
                <span asp-validation-for="Inventory.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                @foreach (var category in Model.Categories)
                {
                    <div class="category">
                        <h4>@category.Name</h4>
                    </div>
                    foreach (var item in Model.Ammunitions.Where(i => i.CategoryId == category.Id))
                    {
                        <p> @item.Name</p>
                        <button type="button" class="btn btn-sm btn-success" onclick="addToList(@item.Id, '@item.Name', 'Ammunition')">+</button>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeFromList(@item.Id)">-</button>
                        
                    }
                    foreach (var item in Model.Weapons.Where(i => i.CategoryId == category.Id))
                    {
                        <p> @item.Name</p>
                        <button type="button" class="btn btn-sm btn-success" onclick="addToList(@item.Id, '@item.Name', 'Weapon')">+</button>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeFromList(@item.Id)">-</button>
                    }
                }
                @foreach (var item in Model.Materials)
                {
                    <div class="material">
                        <h4>@item.Name</h4>
                        <button type="button" class="btn btn-sm btn-success" onclick="addToList(@item.Id, '@item.Name', 'Material')">+</button>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeFromList(@item.Id)">-</button>
                    </div>
                }
            </div>

            <h4>Your List</h4>
            <ul id="listDisplay"></ul>
            <input type="hidden" name="SelectedItems" id="SelectedItems" />

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>

        <div class="mt-3">
            <a asp-page="Index">Back to List</a>
        </div>
    </div>

    <!-- Fixed Box: Your List -->
    <div id="your-list" class="position-sticky top-0 ms-4 p-3 bg-light border rounded shadow" style="min-width: 300px; height: fit-content;">
        <h5>Your List</h5>
        <ul id="listDisplay" class="list-group"></ul>
        <div>
            <h5>Total cost:</h5>
            @foreach (var item in Model.CraftableItems)
            {
                <div class="d-flex justify-content-between align-items-center">
                    <span>@item.CraftableItemId</span>
                    <span>@item.ProductionCost[0].Amount</span>
                </div>
            }
        </div>
    </div>
</div>

<div>
    <a asp-page="Index">Back to List</a>
</div>

<script>
    const list = [];

    function addToList(id, name, type) {
        const existing = list.find(c => c.id === id && c.type === type)
        if (existing) {
            existing.amount++;
        } else {
            list.push({ id, name, type, amount: 1 });
        }

        updateListUI();
    }

    function removeFromList(id, type){
        const index = list.findIndex(c => c.id === id && c.type === type)
        if (index !== -1) {
            list[index].amount--;

            if (list[index].amount <= 0) {
                list.splice(index, 1);
            }
        }

        updateListUI();
    }

    function updateListUI() {
        const display = document.getElementById("listDisplay");
        display.innerHTML = "";

        list.forEach(item => {
            const li = document.createElement("li");

            const label = document.createElement("span");
            label.textContent = `${item.name}: `;

            const input = document.createElement("input");
            input.type = "number";
            input.min = 1;
            input.value = item.amount;
            input.onchange = () => {
                const val = parseInt(input.value, 10); // Uses Radix 10 to force the script to only read it as integers.

                if (isNaN(val)) {
                    input.value = item.amount; 
                    return;
                }
                if (val <= 0) {
                    const index = list.findIndex(i => i.id === item.id);
                    list.splice(index, 1);
                } else {
                    item.amount = val;
                }
                updateListUI();
            };

            li.appendChild(label);
            li.appendChild(input);
            display.appendChild(li);
        });

        document.getElementById("SelectedItems").value = JSON.stringify(list);
    }
</script>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
