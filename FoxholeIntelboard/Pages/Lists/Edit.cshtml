@page
@model FoxholeIntelboard.Pages.Lists.EditModel

@{
    ViewData["Title"] = "Edit";
}

// --- Rubriker och form början ---
<h1>Edit</h1>

<h4>Inventory</h4>
<hr />

<div class="d-flex flex-row">
    <!-- Formulär kolumn -->
    <div class="col-md-8">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <input type="hidden" asp-for="Inventory.Id" />

            <div class="form-group mb-3">
                <label asp-for="Inventory.Name" class="control-label"></label>
                <input asp-for="Inventory.Name" class="form-control" />
                <span asp-validation-for="Inventory.Name" class="text-danger"></span>
            </div>

            <!-- Kategorier som dropdowns -->
            <div class="d-flex flex-wrap gap-3 mb-4">
                @foreach (var category in Model.Categories)
                {
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                            @category.Name
                        </button>
                        <ul class="dropdown-menu">
                            @foreach (var item in Model.Ammunitions.Where(i => i.CategoryId == category.Id))
                            {
                                <li class="dropdown-item d-flex justify-content-between align-items-center">
                                    <span>@item.Name</span>
                                    <span>
                                        <button type="button" class="btn btn-sm btn-success me-1" onclick="addToList(@item.Id, '@item.Name', 'Ammunition')">+</button>
                                        <button type="button" class="btn btn-sm btn-danger" onclick="removeFromList(@item.Id, 'Ammunition')">-</button>
                                    </span>
                                </li>
                            }
                            @foreach (var item in Model.Weapons.Where(i => i.CategoryId == category.Id))
                            {
                                <li class="dropdown-item d-flex justify-content-between align-items-center">
                                    <span>@item.Name</span>
                                    <span>
                                        <button type="button" class="btn btn-sm btn-success me-1" onclick="addToList(@item.Id, '@item.Name', 'Weapon')">+</button>
                                        <button type="button" class="btn btn-sm btn-danger" onclick="removeFromList(@item.Id, 'Weapon')">-</button>
                                    </span>
                                </li>
                            }
                        </ul>
                    </div>
                }

                <!-- Materials dropdown -->
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                        Supplies
                    </button>
                    <ul class="dropdown-menu">
                        @foreach (var item in Model.Materials)
                        {
                            <li class="dropdown-item d-flex justify-content-between align-items-center">
                                <span>@item.Name</span>
                                <span>
                                    <button type="button" class="btn btn-sm btn-success me-1" onclick="addToList(@item.Id, '@item.Name', 'Material')">+</button>
                                    <button type="button" class="btn btn-sm btn-danger" onclick="removeFromList(@item.Id, 'Material')">-</button>
                                </span>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <!-- Hidden field som håller listan i JSON -->
            <input type="hidden" name="SelectedItems" id="SelectedItems" />

            <div class="form-group mt-4">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>

        <div class="mt-3">
            <a asp-page="Index">Back to List</a>
        </div>
    </div>

    <!-- Din lista i sidospalten -->
    <div id="your-list" class="position-sticky top-0 ms-4 p-3 bg-light border rounded shadow" style="min-width: 300px; height: fit-content;">
        <h5>Your List</h5>
        <ul id="listDisplay" class="list-group"></ul>
    </div>
</div>


<script>
    const list = @Html.Raw(Json.Serialize(Model.CratedItems ?? new List<IntelboardAPI.DTO.CratedItemInput>()));

    function addToList(id, name, type) {
        const existing = list.find(c => c.id === id && c.type === type);
        if (existing) {
            existing.amount++;
        } else {
            list.push({ id, name, type, amount: 1 });
        }
        updateListUI();
    }

    function removeFromList(id, type) {
        const index = list.findIndex(c => c.id === id && c.type === type);
        if (index !== -1) {
            list[index].amount--;
            if (list[index].amount <= 0) {
                list.splice(index, 1);
            }
        }
        updateListUI();
    }

    function updateListUI() {
        const display = document.getElementById("listDisplay");
        display.innerHTML = "";

        list.forEach(item => {
            const li = document.createElement("li");
            li.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");

            const label = document.createElement("span");
            label.textContent = item.name;

            const input = document.createElement("input");
            input.type = "number";
            input.min = 1;
            input.value = item.amount;
            input.classList.add("form-control", "form-control-sm");
            input.style.width = "70px";

            input.onchange = () => {
                const val = parseInt(input.value, 10);
                if (isNaN(val) || val <= 0) {
                    const idx = list.findIndex(i => i.id === item.id && i.type === item.type);
                    if (idx !== -1) {
                        list.splice(idx, 1);
                    }
                } else {
                    item.amount = val;
                }
                updateListUI();
            };

            li.appendChild(label);
            li.appendChild(input);
            display.appendChild(li);
        });

        // Uppdatera dold input med JSON-sträng av listan
        document.getElementById("SelectedItems").value = JSON.stringify(list);
    }

    // Stoppa dropdown från att stängas vid klick inuti menyn
    document.querySelectorAll('.dropdown-menu').forEach(menu => {
        menu.addEventListener('click', e => e.stopPropagation());
    });

    // Kör UI-uppdatering direkt vid sidladdning för att visa initiala data
    updateListUI();
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
