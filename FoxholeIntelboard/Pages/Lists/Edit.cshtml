@page
@model FoxholeIntelboard.Pages.Lists.EditModel

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Inventory</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Inventory.Name" class="control-label"></label>
                <input asp-for="Inventory.Name" class="form-control" />
                <span asp-validation-for="Inventory.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                @foreach (var category in Model.Categories)
                {
                    <div class="category">
                        <h4>@category.Name</h4>
                    </div>
                    foreach (var item in Model.Ammunitions.Where(i => i.CategoryId == category.Id))
                    {
                        <p>@item.Name</p>
                        <button type="button" class="btn btn-sm btn-success" onclick="addToList(@item.Id, '@item.Name', 'Ammunition')">+</button>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeFromList(@item.Id, 'Ammunition')">-</button>
                    }
                    foreach (var item in Model.Weapons.Where(i => i.CategoryId == category.Id))
                    {
                        <p>@item.Name</p>
                        <button type="button" class="btn btn-sm btn-success" onclick="addToList(@item.Id, '@item.Name', 'Weapon')">+</button>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeFromList(@item.Id, 'Weapon')">-</button>
                    }
                }
                @foreach (var item in Model.Materials)
                {
                    <div class="material">
                        <h4>@item.Name</h4>
                        <button type="button" class="btn btn-sm btn-success" onclick="addToList(@item.Id, '@item.Name', 'Material')">+</button>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeFromList(@item.Id, 'Material')">-</button>
                    </div>
                }
            </div>

            <h4>Your List</h4>
            <ul id="listDisplay"></ul>
            <input type="hidden" name="SelectedItems" id="SelectedItems" />

            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="./Index">Back to List</a>
</div>

@{
    var itemsJson = Model.Inventory.CratedItems != null
        ? System.Text.Json.JsonSerializer.Serialize(Model.Inventory.CratedItems)
        : "[]";
}
<script>
    const list = @Html.Raw(itemsJson); // list blir JS-array direkt
    console.log(list);
    // Initiera listan från servern (modelldata)
    @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Inventory.CratedItems))

    function addToList(id, name, type) {
        const existing = list.find(c => c.id === id && c.type === type);
        if (existing) {
            existing.amount++;
        } else {
            list.push({ id, name, type, amount: 1 });
        }
        updateListUI();
    }

    function removeFromList(id, type){
        const index = list.findIndex(c => c.id === id && c.type === type);
        if (index !== -1) {
            list[index].amount--;
            if (list[index].amount <= 0) {
                list.splice(index, 1);
            }
        }
        updateListUI();
    }

    function updateListUI() {
        const display = document.getElementById("listDisplay");
        display.innerHTML = "";

        list.forEach(item => {
            const li = document.createElement("li");

            const label = document.createElement("span");
            label.textContent = `${item.name}: `;

            const input = document.createElement("input");
            input.type = "number";
            input.min = 1;
            input.value = item.amount;
            input.onchange = () => {
                const val = parseInt(input.value, 10);

                if (isNaN(val)) {
                    input.value = item.amount;
                    return;
                }
                if (val <= 0) {
                    const index = list.findIndex(i => i.id === item.id && i.type === item.type);
                    if (index !== -1) {
                        list.splice(index, 1);
                    }
                } else {
                    item.amount = val;
                }
                updateListUI();
            };

            li.appendChild(label);
            li.appendChild(input);
            display.appendChild(li);
        });

        // Uppdatera den dolda inputen med JSON-string av listan
        document.getElementById("SelectedItems").value = JSON.stringify(list);
    }

    // Kör UI-uppdatering direkt vid sidladdning för att visa sparade värden
    updateListUI();
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
